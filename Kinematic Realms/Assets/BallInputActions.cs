//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.14.0
//     from Assets/BallInputActions.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

namespace Ball
{
    /// <summary>
    /// Provides programmatic access to <see cref="InputActionAsset" />, <see cref="InputActionMap" />, <see cref="InputAction" /> and <see cref="InputControlScheme" /> instances defined in asset "Assets/BallInputActions.inputactions".
    /// </summary>
    /// <remarks>
    /// This class is source generated and any manual edits will be discarded if the associated asset is reimported or modified.
    /// </remarks>
    /// <example>
    /// <code>
    /// using namespace UnityEngine;
    /// using UnityEngine.InputSystem;
    ///
    /// // Example of using an InputActionMap named "Player" from a UnityEngine.MonoBehaviour implementing callback interface.
    /// public class Example : MonoBehaviour, MyActions.IPlayerActions
    /// {
    ///     private MyActions_Actions m_Actions;                  // Source code representation of asset.
    ///     private MyActions_Actions.PlayerActions m_Player;     // Source code representation of action map.
    ///
    ///     void Awake()
    ///     {
    ///         m_Actions = new MyActions_Actions();              // Create asset object.
    ///         m_Player = m_Actions.Player;                      // Extract action map object.
    ///         m_Player.AddCallbacks(this);                      // Register callback interface IPlayerActions.
    ///     }
    ///
    ///     void OnDestroy()
    ///     {
    ///         m_Actions.Dispose();                              // Destroy asset object.
    ///     }
    ///
    ///     void OnEnable()
    ///     {
    ///         m_Player.Enable();                                // Enable all actions within map.
    ///     }
    ///
    ///     void OnDisable()
    ///     {
    ///         m_Player.Disable();                               // Disable all actions within map.
    ///     }
    ///
    ///     #region Interface implementation of MyActions.IPlayerActions
    ///
    ///     // Invoked when "Move" action is either started, performed or canceled.
    ///     public void OnMove(InputAction.CallbackContext context)
    ///     {
    ///         Debug.Log($"OnMove: {context.ReadValue&lt;Vector2&gt;()}");
    ///     }
    ///
    ///     // Invoked when "Attack" action is either started, performed or canceled.
    ///     public void OnAttack(InputAction.CallbackContext context)
    ///     {
    ///         Debug.Log($"OnAttack: {context.ReadValue&lt;float&gt;()}");
    ///     }
    ///
    ///     #endregion
    /// }
    /// </code>
    /// </example>
    public partial class @Ball_Input_Actions: IInputActionCollection2, IDisposable
    {
        /// <summary>
        /// Provides access to the underlying asset instance.
        /// </summary>
        public InputActionAsset asset { get; }

        /// <summary>
        /// Constructs a new instance.
        /// </summary>
        public @Ball_Input_Actions()
        {
            asset = InputActionAsset.FromJson(@"{
    ""name"": ""BallInputActions"",
    ""maps"": [
        {
            ""name"": ""Ball"",
            ""id"": ""f6bbf537-cc01-49c8-bf6f-da45ee406e13"",
            ""actions"": [
                {
                    ""name"": ""press"",
                    ""type"": ""Button"",
                    ""id"": ""12d2aa65-99a6-47e2-8c70-d07bd016509b"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""screenPos"",
                    ""type"": ""Value"",
                    ""id"": ""803bab42-acbe-4b6f-8386-5a8b0557e4f7"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""scrollZ"",
                    ""type"": ""Value"",
                    ""id"": ""1dcdbc63-329e-49d6-8630-5d7dd1970af2"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""altScrollZ"",
                    ""type"": ""Value"",
                    ""id"": ""2192a881-64a9-4911-8250-021fdc963c48"",
                    ""expectedControlType"": ""Axis"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""17e4ad01-8015-4684-ab3f-8f186959d72d"",
                    ""path"": ""<Mouse>/position"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""screenPos"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""fbd81eb9-29d8-482f-b44f-a983e80227cf"",
                    ""path"": ""<Touchscreen>/position"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""screenPos"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""52b988e6-7650-4362-b4f7-23173a21bb4b"",
                    ""path"": ""<Mouse>/scroll"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""scrollZ"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""9afa71d5-15ff-44a3-91b8-af874c9e76d0"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""press"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""5fc544fb-ca62-4be3-9667-abd9fdfe5539"",
                    ""path"": ""<Touchscreen>/Press"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""press"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""Button With One Modifier"",
                    ""id"": ""70772297-6f2c-47a7-abfa-a367808fc6d4"",
                    ""path"": ""ButtonWithOneModifier"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""altScrollZ"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""Modifier"",
                    ""id"": ""3cbd07a9-5fa8-42b3-bedd-21584f71bd0a"",
                    ""path"": ""<Keyboard>/leftAlt"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""altScrollZ"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""Button"",
                    ""id"": ""2a4eb600-e0eb-4a2a-87c8-c5adf565b6d6"",
                    ""path"": ""<Mouse>/delta/y"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""altScrollZ"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
            // Ball
            m_Ball = asset.FindActionMap("Ball", throwIfNotFound: true);
            m_Ball_press = m_Ball.FindAction("press", throwIfNotFound: true);
            m_Ball_screenPos = m_Ball.FindAction("screenPos", throwIfNotFound: true);
            m_Ball_scrollZ = m_Ball.FindAction("scrollZ", throwIfNotFound: true);
            m_Ball_altScrollZ = m_Ball.FindAction("altScrollZ", throwIfNotFound: true);
        }

        ~@Ball_Input_Actions()
        {
            UnityEngine.Debug.Assert(!m_Ball.enabled, "This will cause a leak and performance issues, Ball_Input_Actions.Ball.Disable() has not been called.");
        }

        /// <summary>
        /// Destroys this asset and all associated <see cref="InputAction"/> instances.
        /// </summary>
        public void Dispose()
        {
            UnityEngine.Object.Destroy(asset);
        }

        /// <inheritdoc cref="UnityEngine.InputSystem.InputActionAsset.bindingMask" />
        public InputBinding? bindingMask
        {
            get => asset.bindingMask;
            set => asset.bindingMask = value;
        }

        /// <inheritdoc cref="UnityEngine.InputSystem.InputActionAsset.devices" />
        public ReadOnlyArray<InputDevice>? devices
        {
            get => asset.devices;
            set => asset.devices = value;
        }

        /// <inheritdoc cref="UnityEngine.InputSystem.InputActionAsset.controlSchemes" />
        public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

        /// <inheritdoc cref="UnityEngine.InputSystem.InputActionAsset.Contains(InputAction)" />
        public bool Contains(InputAction action)
        {
            return asset.Contains(action);
        }

        /// <inheritdoc cref="UnityEngine.InputSystem.InputActionAsset.GetEnumerator()" />
        public IEnumerator<InputAction> GetEnumerator()
        {
            return asset.GetEnumerator();
        }

        /// <inheritdoc cref="IEnumerable.GetEnumerator()" />
        IEnumerator IEnumerable.GetEnumerator()
        {
            return GetEnumerator();
        }

        /// <inheritdoc cref="UnityEngine.InputSystem.InputActionAsset.Enable()" />
        public void Enable()
        {
            asset.Enable();
        }

        /// <inheritdoc cref="UnityEngine.InputSystem.InputActionAsset.Disable()" />
        public void Disable()
        {
            asset.Disable();
        }

        /// <inheritdoc cref="UnityEngine.InputSystem.InputActionAsset.bindings" />
        public IEnumerable<InputBinding> bindings => asset.bindings;

        /// <inheritdoc cref="UnityEngine.InputSystem.InputActionAsset.FindAction(string, bool)" />
        public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
        {
            return asset.FindAction(actionNameOrId, throwIfNotFound);
        }

        /// <inheritdoc cref="UnityEngine.InputSystem.InputActionAsset.FindBinding(InputBinding, out InputAction)" />
        public int FindBinding(InputBinding bindingMask, out InputAction action)
        {
            return asset.FindBinding(bindingMask, out action);
        }

        // Ball
        private readonly InputActionMap m_Ball;
        private List<IBallActions> m_BallActionsCallbackInterfaces = new List<IBallActions>();
        private readonly InputAction m_Ball_press;
        private readonly InputAction m_Ball_screenPos;
        private readonly InputAction m_Ball_scrollZ;
        private readonly InputAction m_Ball_altScrollZ;
        /// <summary>
        /// Provides access to input actions defined in input action map "Ball".
        /// </summary>
        public struct BallActions
        {
            private @Ball_Input_Actions m_Wrapper;

            /// <summary>
            /// Construct a new instance of the input action map wrapper class.
            /// </summary>
            public BallActions(@Ball_Input_Actions wrapper) { m_Wrapper = wrapper; }
            /// <summary>
            /// Provides access to the underlying input action "Ball/press".
            /// </summary>
            public InputAction @press => m_Wrapper.m_Ball_press;
            /// <summary>
            /// Provides access to the underlying input action "Ball/screenPos".
            /// </summary>
            public InputAction @screenPos => m_Wrapper.m_Ball_screenPos;
            /// <summary>
            /// Provides access to the underlying input action "Ball/scrollZ".
            /// </summary>
            public InputAction @scrollZ => m_Wrapper.m_Ball_scrollZ;
            /// <summary>
            /// Provides access to the underlying input action "Ball/altScrollZ".
            /// </summary>
            public InputAction @altScrollZ => m_Wrapper.m_Ball_altScrollZ;
            /// <summary>
            /// Provides access to the underlying input action map instance.
            /// </summary>
            public InputActionMap Get() { return m_Wrapper.m_Ball; }
            /// <inheritdoc cref="UnityEngine.InputSystem.InputActionMap.Enable()" />
            public void Enable() { Get().Enable(); }
            /// <inheritdoc cref="UnityEngine.InputSystem.InputActionMap.Disable()" />
            public void Disable() { Get().Disable(); }
            /// <inheritdoc cref="UnityEngine.InputSystem.InputActionMap.enabled" />
            public bool enabled => Get().enabled;
            /// <summary>
            /// Implicitly converts an <see ref="BallActions" /> to an <see ref="InputActionMap" /> instance.
            /// </summary>
            public static implicit operator InputActionMap(BallActions set) { return set.Get(); }
            /// <summary>
            /// Adds <see cref="InputAction.started"/>, <see cref="InputAction.performed"/> and <see cref="InputAction.canceled"/> callbacks provided via <param cref="instance" /> on all input actions contained in this map.
            /// </summary>
            /// <param name="instance">Callback instance.</param>
            /// <remarks>
            /// If <paramref name="instance" /> is <c>null</c> or <paramref name="instance"/> have already been added this method does nothing.
            /// </remarks>
            /// <seealso cref="BallActions" />
            public void AddCallbacks(IBallActions instance)
            {
                if (instance == null || m_Wrapper.m_BallActionsCallbackInterfaces.Contains(instance)) return;
                m_Wrapper.m_BallActionsCallbackInterfaces.Add(instance);
                @press.started += instance.OnPress;
                @press.performed += instance.OnPress;
                @press.canceled += instance.OnPress;
                @screenPos.started += instance.OnScreenPos;
                @screenPos.performed += instance.OnScreenPos;
                @screenPos.canceled += instance.OnScreenPos;
                @scrollZ.started += instance.OnScrollZ;
                @scrollZ.performed += instance.OnScrollZ;
                @scrollZ.canceled += instance.OnScrollZ;
                @altScrollZ.started += instance.OnAltScrollZ;
                @altScrollZ.performed += instance.OnAltScrollZ;
                @altScrollZ.canceled += instance.OnAltScrollZ;
            }

            /// <summary>
            /// Removes <see cref="InputAction.started"/>, <see cref="InputAction.performed"/> and <see cref="InputAction.canceled"/> callbacks provided via <param cref="instance" /> on all input actions contained in this map.
            /// </summary>
            /// <remarks>
            /// Calling this method when <paramref name="instance" /> have not previously been registered has no side-effects.
            /// </remarks>
            /// <seealso cref="BallActions" />
            private void UnregisterCallbacks(IBallActions instance)
            {
                @press.started -= instance.OnPress;
                @press.performed -= instance.OnPress;
                @press.canceled -= instance.OnPress;
                @screenPos.started -= instance.OnScreenPos;
                @screenPos.performed -= instance.OnScreenPos;
                @screenPos.canceled -= instance.OnScreenPos;
                @scrollZ.started -= instance.OnScrollZ;
                @scrollZ.performed -= instance.OnScrollZ;
                @scrollZ.canceled -= instance.OnScrollZ;
                @altScrollZ.started -= instance.OnAltScrollZ;
                @altScrollZ.performed -= instance.OnAltScrollZ;
                @altScrollZ.canceled -= instance.OnAltScrollZ;
            }

            /// <summary>
            /// Unregisters <param cref="instance" /> and unregisters all input action callbacks via <see cref="BallActions.UnregisterCallbacks(IBallActions)" />.
            /// </summary>
            /// <seealso cref="BallActions.UnregisterCallbacks(IBallActions)" />
            public void RemoveCallbacks(IBallActions instance)
            {
                if (m_Wrapper.m_BallActionsCallbackInterfaces.Remove(instance))
                    UnregisterCallbacks(instance);
            }

            /// <summary>
            /// Replaces all existing callback instances and previously registered input action callbacks associated with them with callbacks provided via <param cref="instance" />.
            /// </summary>
            /// <remarks>
            /// If <paramref name="instance" /> is <c>null</c>, calling this method will only unregister all existing callbacks but not register any new callbacks.
            /// </remarks>
            /// <seealso cref="BallActions.AddCallbacks(IBallActions)" />
            /// <seealso cref="BallActions.RemoveCallbacks(IBallActions)" />
            /// <seealso cref="BallActions.UnregisterCallbacks(IBallActions)" />
            public void SetCallbacks(IBallActions instance)
            {
                foreach (var item in m_Wrapper.m_BallActionsCallbackInterfaces)
                    UnregisterCallbacks(item);
                m_Wrapper.m_BallActionsCallbackInterfaces.Clear();
                AddCallbacks(instance);
            }
        }
        /// <summary>
        /// Provides a new <see cref="BallActions" /> instance referencing this action map.
        /// </summary>
        public BallActions @Ball => new BallActions(this);
        /// <summary>
        /// Interface to implement callback methods for all input action callbacks associated with input actions defined by "Ball" which allows adding and removing callbacks.
        /// </summary>
        /// <seealso cref="BallActions.AddCallbacks(IBallActions)" />
        /// <seealso cref="BallActions.RemoveCallbacks(IBallActions)" />
        public interface IBallActions
        {
            /// <summary>
            /// Method invoked when associated input action "press" is either <see cref="UnityEngine.InputSystem.InputAction.started" />, <see cref="UnityEngine.InputSystem.InputAction.performed" /> or <see cref="UnityEngine.InputSystem.InputAction.canceled" />.
            /// </summary>
            /// <seealso cref="UnityEngine.InputSystem.InputAction.started" />
            /// <seealso cref="UnityEngine.InputSystem.InputAction.performed" />
            /// <seealso cref="UnityEngine.InputSystem.InputAction.canceled" />
            void OnPress(InputAction.CallbackContext context);
            /// <summary>
            /// Method invoked when associated input action "screenPos" is either <see cref="UnityEngine.InputSystem.InputAction.started" />, <see cref="UnityEngine.InputSystem.InputAction.performed" /> or <see cref="UnityEngine.InputSystem.InputAction.canceled" />.
            /// </summary>
            /// <seealso cref="UnityEngine.InputSystem.InputAction.started" />
            /// <seealso cref="UnityEngine.InputSystem.InputAction.performed" />
            /// <seealso cref="UnityEngine.InputSystem.InputAction.canceled" />
            void OnScreenPos(InputAction.CallbackContext context);
            /// <summary>
            /// Method invoked when associated input action "scrollZ" is either <see cref="UnityEngine.InputSystem.InputAction.started" />, <see cref="UnityEngine.InputSystem.InputAction.performed" /> or <see cref="UnityEngine.InputSystem.InputAction.canceled" />.
            /// </summary>
            /// <seealso cref="UnityEngine.InputSystem.InputAction.started" />
            /// <seealso cref="UnityEngine.InputSystem.InputAction.performed" />
            /// <seealso cref="UnityEngine.InputSystem.InputAction.canceled" />
            void OnScrollZ(InputAction.CallbackContext context);
            /// <summary>
            /// Method invoked when associated input action "altScrollZ" is either <see cref="UnityEngine.InputSystem.InputAction.started" />, <see cref="UnityEngine.InputSystem.InputAction.performed" /> or <see cref="UnityEngine.InputSystem.InputAction.canceled" />.
            /// </summary>
            /// <seealso cref="UnityEngine.InputSystem.InputAction.started" />
            /// <seealso cref="UnityEngine.InputSystem.InputAction.performed" />
            /// <seealso cref="UnityEngine.InputSystem.InputAction.canceled" />
            void OnAltScrollZ(InputAction.CallbackContext context);
        }
    }
}
